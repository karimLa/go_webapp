package models

import (
	"errors"

	"github.com/karimla/webapp/lib"
	"github.com/karimla/webapp/utils"
	"golang.org/x/crypto/bcrypt"
	"gorm.io/gorm"
)

var (
	ErrNotFound        = errors.New("models: resource not found")
	ErrInvalidID       = errors.New("models: ID provided was invalid")
	ErrInvalidPassword = errors.New("models: incorrect password provided")
	ErrNotImplemented  = errors.New("not implemented")
)

// User represents the user model stored in our database
// This is used for user accounts, storing both an email
// address and a password so users can log in and gain
// access to their content
type User struct {
	gorm.Model
	Name         string
	Email        string `gorm:"not null;unique;index"`
	Password     string `gorm:"-"`
	PasswordHash string `gorm:"not null"`
	Remember     string `gorm:"-"`
	RememberHash string `gorm:"not null;unique;index"`
}

// UserDB is used to interact with the users database.
//
// For pretty much all single user queries:
// If the user is found, we will return a nil error
// If the user is not found, we will return ErrNotFound
// If there is another error, we will return an error with
// more information about what went wrong. This may not be
// an error generated by the models package.
//
// For single user queries, any error but ErrNotFound should
// probably result in a 500 error.
type UserDB interface {
	// Methods for querying for single users
	ByID(id uint) (*User, error)
	ByEmail(email string) (*User, error)
	ByRemember(token string) (*User, error)

	// Methods for altering users
	Create(user *User) error
	Update(user *User) error
	Delete(id uint) error

	// Used to close a DB connection
	Close() error

	// Migration helpers
	AutoMigrate() error
	DestructiveReset() error
}

// UserService is a set of mthods used to manipulate and
// work with the user model
type UserService interface {
	// Authenticate will verify the provided email address and
	// password are correct. If they are correct, the user
	// corresponding to that email will be returned, Otherwise
	// it returns either:
	// ErrNotFound, ErrInvalidPassword, or another error if
	// something goes wrong.
	Authenticate(email, password string) (*User, error)
	UserDB
}

func NewUserService(db *gorm.DB) UserService {
	ug := newUserGorm(db)

	return &userService{
		UserDB: &userValidator{
			UserDB: ug,
		},
	}
}

type userService struct {
	UserDB
}

// Authenticate will verify the provided email address and
// password are correct. If they are correct, the user
// corresponding to that email will be returned, Otherwise
// it returns either:
// ErrNotFound, ErrInvalidPassword, or another error if
// something goes wrong.
func (us *userService) Authenticate(email, password string) (*User, error) {
	u, err := us.ByEmail(email)
	if err != nil {
		return nil, err
	}

	hpwBytes := []byte(u.PasswordHash)
	pwByes := []byte(password + utils.GetPepper())
	err = bcrypt.CompareHashAndPassword(hpwBytes, pwByes)
	if err != nil {
		if err == bcrypt.ErrMismatchedHashAndPassword {
			return nil, ErrInvalidPassword
		}

		return nil, err
	}

	return u, nil
}

type userValidator struct {
	UserDB
}

type userGorm struct {
	db   *gorm.DB
	hmac lib.HMAC
}

func newUserGorm(db *gorm.DB) *userGorm {
	h := lib.NewHMAC(utils.GetSecret())
	return &userGorm{db: db, hmac: h}
}

func (ug *userGorm) ByID(id uint) (*User, error) {
	var u User
	db := ug.db.Where("id = ?", id)
	err := first(db, &u)
	return &u, err
}

func (ug *userGorm) ByEmail(email string) (*User, error) {
	var u User
	db := ug.db.Where("email = ?", email)
	err := first(db, &u)
	return &u, err
}

func (ug *userGorm) ByRemember(token string) (*User, error) {
	var u User
	hashedToken := ug.hmac.Hash(token)
	db := ug.db.Where("remember_hash = ?", hashedToken)
	err := first(db, &u)
	return &u, err
}

func (ug *userGorm) Create(u *User) error {
	pwBytes := []byte(u.Password + utils.GetPepper())
	hb, err := bcrypt.GenerateFromPassword(pwBytes, bcrypt.DefaultCost)
	if err != nil {
		return err
	}

	u.PasswordHash = string(hb)
	u.Password = ""

	if u.Remember == "" {
		token, err := lib.RememeberToken()
		if err != nil {
			return err
		}
		u.RememberHash = token
	} else {
		u.RememberHash = ug.hmac.Hash(u.Remember)
	}

	return ug.db.Create(u).Error
}

func (ug *userGorm) Update(u *User) error {
	if u.Remember != "" {
		u.RememberHash = ug.hmac.Hash(u.Remember)
	}
	return ug.db.Save(u).Error
}

func (ug *userGorm) Delete(id uint) error {
	if id == 0 {
		return ErrInvalidID
	}
	user := User{Model: gorm.Model{ID: id}}
	return ug.db.Delete(&user).Error
}

// Close returns a not implemented error
func (ug *userGorm) Close() error {
	return ErrNotImplemented
}

func (ug *userGorm) AutoMigrate() error {
	return ug.db.AutoMigrate(&User{})
}

func (ug *userGorm) DestructiveReset() error {
	utils.Must(ug.db.Migrator().DropTable(&User{}))
	return ug.db.AutoMigrate(&User{})
}

// first will query using the provided gorm.DB and it will
// get the first item returned amd place it into dst. If
// nothing is found in the query, it will return ErrNotFound
//
// NOTE: dst should be a pointer so that it populates
// the refrenced variable
func first(db *gorm.DB, dst interface{}) error {
	err := db.First(dst).Error
	if err == gorm.ErrRecordNotFound {
		return ErrNotFound
	}
	return err
}
